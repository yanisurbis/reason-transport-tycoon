// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Random = require("bs-platform/lib/js/random.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function convertLocation($$location) {
  switch ($$location) {
    case /* Factory */0 :
        return "Factory";
    case /* Port */1 :
        return "Port";
    case /* A */2 :
        return "A";
    case /* B */3 :
        return "B";
    
  }
}

function convertActivity(a) {
  if (a) {
    return "Wait";
  } else {
    return "Move";
  }
}

function encodeAction(a) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "duration",
                a[/* duration */2]
              ],
              /* :: */[
                /* tuple */[
                  "start",
                  convertLocation(a[/* start */0])
                ],
                /* :: */[
                  /* tuple */[
                    "finish",
                    convertLocation(a[/* finish */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "activity",
                      a[/* activity */3] ? "Wait" : "Move"
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function encodeElement(e) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "destination",
                convertLocation(e[/* destination */0])
              ],
              /* [] */0
            ]);
}

function encodeEvent(e) {
  var match = e[/* endTime */5];
  var match$1 = e[/* payload */2];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "action",
                encodeAction(e[/* action */3])
              ],
              /* :: */[
                /* tuple */[
                  "startTime",
                  e[/* startTime */4]
                ],
                /* :: */[
                  /* tuple */[
                    "endTime",
                    match !== undefined ? match : "*"
                  ],
                  /* :: */[
                    /* tuple */[
                      "actorId",
                      e[/* actorId */1]
                    ],
                    /* :: */[
                      /* tuple */[
                        "payload",
                        match$1 !== undefined ? encodeElement(match$1) : "*"
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

var elementsToDeliver = List.map((function (x) {
        return /* record */[/* destination */x];
      }), /* :: */[
      /* A */2,
      /* :: */[
        /* A */2,
        /* :: */[
          /* B */3,
          /* :: */[
            /* A */2,
            /* :: */[
              /* B */3,
              /* :: */[
                /* B */3,
                /* :: */[
                  /* A */2,
                  /* :: */[
                    /* B */3,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var car1 = /* record */[
  /* id */"car1",
  /* category : Car */0,
  /* location : Factory */0
];

var car2 = /* record */[
  /* id */"car2",
  /* category : Car */0,
  /* location : Factory */0
];

var ship1 = /* record */[
  /* id */"ship1",
  /* category : Ship */1,
  /* location : Port */1
];

var system_000 = /* amountToDeliver */List.length(elementsToDeliver);

var system_002 = /* queues : :: */[
  /* record */[
    /* location : Factory */0,
    /* elements */elementsToDeliver,
    /* final */false
  ],
  /* :: */[
    /* record */[
      /* location : Port */1,
      /* elements : [] */0,
      /* final */false
    ],
    /* :: */[
      /* record */[
        /* location : A */2,
        /* elements : [] */0,
        /* final */true
      ],
      /* :: */[
        /* record */[
          /* location : B */3,
          /* elements : [] */0,
          /* final */true
        ],
        /* [] */0
      ]
    ]
  ]
];

var system_004 = /* actors : :: */[
  car1,
  /* :: */[
    car2,
    /* :: */[
      ship1,
      /* [] */0
    ]
  ]
];

var system = /* record */[
  system_000,
  /* currentTime */0,
  system_002,
  /* events : [] */0,
  system_004,
  /* history : [] */0
];

function isEventCompleted(system, $$event) {
  return ($$event[/* startTime */4] + $$event[/* action */3][/* duration */2] | 0) <= system[/* currentTime */1];
}

function getCompletedEvents(system) {
  return List.filter((function (param) {
                  return isEventCompleted(system, param);
                }))(system[/* events */3]);
}

function getEventActor(system, $$event) {
  return List.find((function (actor) {
                return actor[/* id */0] === $$event[/* actorId */1];
              }), system[/* actors */4]);
}

function getFreeActors(system) {
  var busyActorsIds = List.map((function ($$event) {
          return $$event[/* actorId */1];
        }), List.filter((function ($$event) {
                return !isEventCompleted(system, $$event);
              }))(system[/* events */3]));
  var isBusyActor = function (actor) {
    return Belt_List.has(busyActorsIds, actor[/* id */0], (function (x, y) {
                  return x === y;
                }));
  };
  return List.filter((function (actor) {
                  return !isBusyActor(actor);
                }))(system[/* actors */4]);
}

function isDeliveryInProcess(system) {
  var amountDelivered = List.length(List.concat(List.map((function (queue) {
                  return queue[/* elements */1];
                }), List.filter((function (queue) {
                        return queue[/* final */2];
                      }))(system[/* queues */2]))));
  return amountDelivered !== system[/* amountToDeliver */0];
}

function getElementFromQueue(system, queueLocation) {
  var queue = List.find((function (queue) {
          return queue[/* location */0] === queueLocation;
        }), system[/* queues */2]);
  return Belt_List.head(queue[/* elements */1]);
}

function removeElementFromQueue(system, queueLocation) {
  var updatedQueues = List.map((function (queue) {
          var match = queue[/* location */0] === queueLocation;
          if (match) {
            return /* record */[
                    /* location */queue[/* location */0],
                    /* elements */List.tl(queue[/* elements */1]),
                    /* final */queue[/* final */2]
                  ];
          } else {
            return queue;
          }
        }), system[/* queues */2]);
  return /* record */[
          /* amountToDeliver */system[/* amountToDeliver */0],
          /* currentTime */system[/* currentTime */1],
          /* queues */updatedQueues,
          /* events */system[/* events */3],
          /* actors */system[/* actors */4],
          /* history */system[/* history */5]
        ];
}

function addElementToQueue(system, queueLocation, element) {
  var updatedQueues = List.map((function (queue) {
          var match = queue[/* location */0] === queueLocation;
          if (match) {
            return /* record */[
                    /* location */queue[/* location */0],
                    /* elements */Belt_List.add(queue[/* elements */1], element),
                    /* final */queue[/* final */2]
                  ];
          } else {
            return queue;
          }
        }), system[/* queues */2]);
  return /* record */[
          /* amountToDeliver */system[/* amountToDeliver */0],
          /* currentTime */system[/* currentTime */1],
          /* queues */updatedQueues,
          /* events */system[/* events */3],
          /* actors */system[/* actors */4],
          /* history */system[/* history */5]
        ];
}

function getUUID(param) {
  return String(Random.$$int(999999999));
}

function addActorEvent(system, actor) {
  var elementFromFactory = getElementFromQueue(system, /* Factory */0);
  var elementFromPort = getElementFromQueue(system, /* Port */1);
  var actorLocation = actor[/* location */2];
  var match = actor[/* category */1];
  var match$1;
  if (match) {
    var exit = 0;
    var exit$1 = 0;
    if (elementFromPort !== undefined && elementFromPort[/* destination */0] === 2) {
      if (actorLocation !== 0) {
        switch (actorLocation - 1 | 0) {
          case /* Factory */0 :
              match$1 = /* tuple */[
                /* record */[
                  /* start : Port */1,
                  /* finish : A */2,
                  /* duration */4,
                  /* activity : Move */0
                ],
                elementFromPort,
                removeElementFromQueue(system, /* Port */1)
              ];
              break;
          case /* Port */1 :
              exit$1 = 2;
              break;
          case /* A */2 :
              exit = 1;
              break;
          
        }
      } else {
        exit = 1;
      }
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (actorLocation !== 2) {
        exit = 1;
      } else {
        match$1 = /* tuple */[
          /* record */[
            /* start : A */2,
            /* finish : Port */1,
            /* duration */4,
            /* activity : Move */0
          ],
          undefined,
          system
        ];
      }
    }
    if (exit === 1) {
      match$1 = /* tuple */[
        /* record */[
          /* start */actorLocation,
          /* finish */actorLocation,
          /* duration */1,
          /* activity : Wait */1
        ],
        undefined,
        system
      ];
    }
    
  } else {
    var exit$2 = 0;
    var exit$3 = 0;
    if (elementFromFactory !== undefined) {
      var match$2 = elementFromFactory[/* destination */0];
      if (match$2 !== 2) {
        if (match$2 >= 3 && actorLocation < 3) {
          switch (actorLocation) {
            case /* Factory */0 :
                match$1 = /* tuple */[
                  /* record */[
                    /* start : Factory */0,
                    /* finish : B */3,
                    /* duration */5,
                    /* activity : Move */0
                  ],
                  elementFromFactory,
                  removeElementFromQueue(system, /* Factory */0)
                ];
                break;
            case /* Port */1 :
                exit$3 = 2;
                break;
            case /* A */2 :
                exit$2 = 1;
                break;
            
          }
        } else {
          exit$3 = 2;
        }
      } else if (actorLocation >= 3) {
        exit$3 = 2;
      } else {
        switch (actorLocation) {
          case /* Factory */0 :
              match$1 = /* tuple */[
                /* record */[
                  /* start : Factory */0,
                  /* finish : Port */1,
                  /* duration */1,
                  /* activity : Move */0
                ],
                elementFromFactory,
                removeElementFromQueue(system, /* Factory */0)
              ];
              break;
          case /* Port */1 :
              exit$3 = 2;
              break;
          case /* A */2 :
              exit$2 = 1;
              break;
          
        }
      }
    } else {
      exit$3 = 2;
    }
    if (exit$3 === 2) {
      if (actorLocation !== 0) {
        switch (actorLocation - 1 | 0) {
          case /* Factory */0 :
              match$1 = /* tuple */[
                /* record */[
                  /* start : Port */1,
                  /* finish : Factory */0,
                  /* duration */1,
                  /* activity : Move */0
                ],
                undefined,
                system
              ];
              break;
          case /* Port */1 :
              exit$2 = 1;
              break;
          case /* A */2 :
              match$1 = /* tuple */[
                /* record */[
                  /* start : B */3,
                  /* finish : Factory */0,
                  /* duration */5,
                  /* activity : Move */0
                ],
                undefined,
                system
              ];
              break;
          
        }
      } else {
        exit$2 = 1;
      }
    }
    if (exit$2 === 1) {
      match$1 = /* tuple */[
        /* record */[
          /* start */actorLocation,
          /* finish */actorLocation,
          /* duration */1,
          /* activity : Wait */1
        ],
        undefined,
        system
      ];
    }
    
  }
  var updatedSystem = match$1[2];
  var event_000 = /* id */String(Random.$$int(999999999));
  var event_001 = /* actorId */actor[/* id */0];
  var event_002 = /* payload */match$1[1];
  var event_003 = /* action */match$1[0];
  var event_004 = /* startTime */system[/* currentTime */1];
  var $$event = /* record */[
    event_000,
    event_001,
    event_002,
    event_003,
    event_004,
    /* endTime */undefined
  ];
  return /* record */[
          /* amountToDeliver */updatedSystem[/* amountToDeliver */0],
          /* currentTime */updatedSystem[/* currentTime */1],
          /* queues */updatedSystem[/* queues */2],
          /* events */Belt_List.add(system[/* events */3], $$event),
          /* actors */updatedSystem[/* actors */4],
          /* history */updatedSystem[/* history */5]
        ];
}

function generateNewEvents(system) {
  return List.fold_left(addActorEvent, system, getFreeActors(system));
}

function updateQueues($$event, system) {
  var match = $$event[/* action */3][/* finish */1];
  var match$1 = $$event[/* payload */2];
  if (match$1 !== undefined) {
    return addElementToQueue(system, match, match$1);
  } else {
    return system;
  }
}

function updateActor($$event, actor) {
  var match = actor[/* id */0] === $$event[/* actorId */1];
  if (match) {
    return /* record */[
            /* id */actor[/* id */0],
            /* category */actor[/* category */1],
            /* location */$$event[/* action */3][/* finish */1]
          ];
  } else {
    return actor;
  }
}

function updateActors($$event, system) {
  return /* record */[
          /* amountToDeliver */system[/* amountToDeliver */0],
          /* currentTime */system[/* currentTime */1],
          /* queues */system[/* queues */2],
          /* events */system[/* events */3],
          /* actors */List.map((function (param) {
                  return updateActor($$event, param);
                }), system[/* actors */4]),
          /* history */system[/* history */5]
        ];
}

function processCompletedEvents(system) {
  var updateSystem = function (system, $$event) {
    return updateQueues($$event, updateActors($$event, system));
  };
  return List.fold_left(updateSystem, system, getCompletedEvents(system));
}

function removeCompletedEvents(system) {
  var match = Belt_List.partition(system[/* events */3], (function (param) {
          return isEventCompleted(system, param);
        }));
  return /* record */[
          /* amountToDeliver */system[/* amountToDeliver */0],
          /* currentTime */system[/* currentTime */1],
          /* queues */system[/* queues */2],
          /* events */match[1],
          /* actors */system[/* actors */4],
          /* history */Belt_List.concat(system[/* history */5], List.map((function ($$event) {
                      return /* record */[
                              /* id */$$event[/* id */0],
                              /* actorId */$$event[/* actorId */1],
                              /* payload */$$event[/* payload */2],
                              /* action */$$event[/* action */3],
                              /* startTime */$$event[/* startTime */4],
                              /* endTime */system[/* currentTime */1]
                            ];
                    }), match[0]))
        ];
}

function updateTime(system) {
  return /* record */[
          /* amountToDeliver */system[/* amountToDeliver */0],
          /* currentTime */system[/* currentTime */1] + 1 | 0,
          /* queues */system[/* queues */2],
          /* events */system[/* events */3],
          /* actors */system[/* actors */4],
          /* history */system[/* history */5]
        ];
}

function tick(system) {
  return updateTime(removeCompletedEvents(generateNewEvents(processCompletedEvents(system))));
}

function printSystem(system) {
  var convertToJson = function ($$event) {
    console.log(encodeEvent($$event));
    return /* () */0;
  };
  var eventsToPrint = List.filter((function ($$event) {
            return $$event[/* action */3][/* activity */3] !== /* Wait */1;
          }))(system[/* history */5]);
  List.iter(convertToJson, eventsToPrint);
  console.log("-----------------------------------------");
  return /* () */0;
}

function solve(system) {
  var systemRef = system;
  while(isDeliveryInProcess(systemRef)) {
    systemRef = tick(systemRef);
    printSystem(systemRef);
  };
  console.log("Result: " + String(systemRef[/* currentTime */1] - 1 | 0));
  return /* () */0;
}

solve(system);

exports.convertLocation = convertLocation;
exports.convertActivity = convertActivity;
exports.encodeAction = encodeAction;
exports.encodeElement = encodeElement;
exports.encodeEvent = encodeEvent;
exports.elementsToDeliver = elementsToDeliver;
exports.car1 = car1;
exports.car2 = car2;
exports.ship1 = ship1;
exports.system = system;
exports.isEventCompleted = isEventCompleted;
exports.getCompletedEvents = getCompletedEvents;
exports.getEventActor = getEventActor;
exports.getFreeActors = getFreeActors;
exports.isDeliveryInProcess = isDeliveryInProcess;
exports.getElementFromQueue = getElementFromQueue;
exports.removeElementFromQueue = removeElementFromQueue;
exports.addElementToQueue = addElementToQueue;
exports.getUUID = getUUID;
exports.addActorEvent = addActorEvent;
exports.generateNewEvents = generateNewEvents;
exports.updateQueues = updateQueues;
exports.updateActor = updateActor;
exports.updateActors = updateActors;
exports.processCompletedEvents = processCompletedEvents;
exports.removeCompletedEvents = removeCompletedEvents;
exports.updateTime = updateTime;
exports.tick = tick;
exports.printSystem = printSystem;
exports.solve = solve;
/* elementsToDeliver Not a pure module */
